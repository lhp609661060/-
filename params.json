{
  "name": "Lhpblog",
  "tagline": "小水洼",
  "body": "### 判断是否正方形\r\n    case class  Point(x: Int, y: Int)\r\n\r\n    object Square {\r\n\r\n      def isSquare(points: Point*): Boolean = {\r\n\r\n        if (points.length != 4)\r\n          false\r\n\r\n        else {\r\n          val distances = Range(0, points.length-1)\r\n            .map( p=> getDistances(points.drop(p).toList))\r\n            .flatMap(_.toList)\r\n\r\n          distances.toSet.size == 2\r\n        }\r\n      }\r\n\r\n      def distanceSquare(pointA: Point, pointB: Point): Int =\r\n        (pointA.x - pointB.x) * (pointA.x - pointB.x) + (pointA.y - pointB.y) * (pointA.y - pointB.y)\r\n\r\n      def getDistances(points: List[Point]): List[Int] = points.drop(1).map(distanceSquare(points(0), _))\r\n\r\n    }\r\n\r\n### 取最小分页\r\n    def minN(m: Int, n: Int): (Int, Int) = floop(n, m+n-1, m-1)\r\n\r\n    def isMatch(size: Int, page:Int, total: Int, min: Int): Boolean = {\r\n      page * size >= total && (page-1) * size <=  min\r\n    }\r\n\r\n    def floop(size: Int, total: Int, m: Int): (Int, Int) = {\r\n      val page = math.ceil(total.toFloat / size).toInt\r\n      if (isMatch(size, page, total, m)) {\r\n        (size, page)\r\n      }else{\r\n        floop(size+1, total, m)\r\n      }\r\n    }",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}